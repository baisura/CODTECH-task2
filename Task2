# Import necessary libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import load_iris
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans, DBSCAN, AgglomerativeClustering
from sklearn.metrics import silhouette_score, davies_bouldin_score
from scipy.cluster.hierarchy import dendrogram, linkage

# Load the dataset
data = load_iris()
X = data.data

# Standardize the dataset
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# K-means Clustering
kmeans = KMeans(n_clusters=3, random_state=42)
kmeans_labels = kmeans.fit_predict(X_scaled)

# Hierarchical Clustering
hierarchical = AgglomerativeClustering(n_clusters=3)
hierarchical_labels = hierarchical.fit_predict(X_scaled)

# DBSCAN Clustering
dbscan = DBSCAN(eps=0.5, min_samples=5)
dbscan_labels = dbscan.fit_predict(X_scaled)

# Evaluate the Clustering
def evaluate_clustering(labels, X):
    if len(set(labels)) > 1:  # Ensure there is more than one cluster
        silhouette = silhouette_score(X, labels)
        davies_bouldin = davies_bouldin_score(X, labels)
    else:
        silhouette = -1
        davies_bouldin = np.inf
    return silhouette, davies_bouldin

# Evaluating each clustering technique
kmeans_silhouette, kmeans_db = evaluate_clustering(kmeans_labels, X_scaled)
hierarchical_silhouette, hierarchical_db = evaluate_clustering(hierarchical_labels, X_scaled)
dbscan_silhouette, dbscan_db = evaluate_clustering(dbscan_labels, X_scaled)

print(f"K-means Silhouette Score: {kmeans_silhouette:.2f}, Davies-Bouldin Index: {kmeans_db:.2f}")
print(f"Hierarchical Silhouette Score: {hierarchical_silhouette:.2f}, Davies-Bouldin Index: {hierarchical_db:.2f}")
print(f"DBSCAN Silhouette Score: {dbscan_silhouette:.2f}, Davies-Bouldin Index: {dbscan_db:.2f}")

# Visualization of Clusters using K-means
plt.figure(figsize=(12, 4))

# K-means Plot
plt.subplot(1, 3, 1)
plt.scatter(X_scaled[:, 0], X_scaled[:, 1], c=kmeans_labels, cmap='viridis')
plt.title('K-means Clustering')

# Hierarchical Plot
plt.subplot(1, 3, 2)
plt.scatter(X_scaled[:, 0], X_scaled[:, 1], c=hierarchical_labels, cmap='viridis')
plt.title('Hierarchical Clustering')

# DBSCAN Plot
plt.subplot(1, 3, 3)
plt.scatter(X_scaled[:, 0], X_scaled[:, 1], c=dbscan_labels, cmap='viridis')
plt.title('DBSCAN Clustering')

plt.tight_layout()
plt.show()

# Dendrogram for Hierarchical Clustering
plt.figure(figsize=(8, 6))
linked = linkage(X_scaled, method='ward')
dendrogram(linked, orientation='top', distance_sort='descending', show_leaf_counts=True)
plt.title('Hierarchical Clustering Dendrogram')
plt.show()

